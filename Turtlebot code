rosshutdown
rosinit ('localhost')
ipaddress = 'localhost';
tbot = turtlebot(ipaddress);

% Create subscribers and publisher
%robot = rospublisher('cmd_vel') ;  %Velocities and movement
colorImgSub = rossubscriber('/camera/rgb/image_raw', 'BufferSize', 5);
robot = rospublisher('cmd_vel');
velmsg = rosmessage(robot);

% Parameters for ball position and size
sizeGoal = 68517;

while (1)
    % Get latest image, ball postion, and ball size.
    latestImg = getColorImage(tbot);
    [height,width] = size(latestImg);
    %[position,ballSize] = FindBlueBall(latestImg,blueBallParams);

    params.darkMin = 180;
    params.blueMax = 160;  % Maximum permissible deviation from pure blue
    img = latestImg;
    blueImg = img(:,:,1)/2 + img(:,:,2)/2 - img(:,:,3)/2;
    blueThresh = blueImg < params.blueMax;
    darkIso = -img(:,:,1)/2 - img(:,:,2)/2 + 3*img(:,:,3) - 2*rgb2gray(img);
    darkThresh = darkIso > params.darkMin;
    ball1 = blueThresh & darkThresh;
    s = regionprops(ball1, {'Centroid','Area'});
    position = s.Centroid;
    ballSize = s.Area;



% Initialize velocities to zero.
    linearVel = 0; 
    angularVel = 0;
    
    % Left and right controls
    if isempty(position)
        angularVel = 0.5;
        linearVel = 0;
    elseif (position(1) < (height/2))
        angularVel = 0.2;
    elseif (position(1) > (height/2))
        angularVel = -0.2;
    elseif (position(1) == (height/2))
       angularVel = 0; 
    end
    
    % Forward and back control
    if isempty(ballSize)
        angularVel = 0.5;
        linearVel = 0;
    elseif ballSize > sizeGoal 
        linearVel = - 0.1;
    elseif ballSize < sizeGoal 
        linearVel = 0.1;
    elseif ballSize == sizeGoal 
        linearVel = 0; 
    end
    
    % Send velocity commands and wait for commands to send.
      velmsg.Linear.X = linearVel;
      velmsg.Angular.Z = angularVel;
      send(robot,velmsg);
 end
  % img = receive(colorImgSub);
 % imshow(readImage(img))

