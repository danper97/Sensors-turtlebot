rosshutdown
rosinit('localhost')
ipaddress = 'localhost';
tbot = turtlebot(ipaddress);

robot = rospublisher('cmd_vel') ;  %Velocities and movement
colorImgSub = rossubscriber('/camera/rgb/image_raw', 'BufferSize', 5);
handles.colorImgSub = receive(colorImgSub,3); 
laser = rossubscriber('scan');

blueBallParams.blueMax = 120;  
blueBallParams.darkMin = 30;   

while (1)
  latestImg = readImage(handles.colorImgSub);
  [c,~,ball] = FindBlueBall(latestImg,blueBallParams);
  [height,width] = size(latestImg);
  [position,~] = FindBlueBall(latestImg,blueBallParams);
  distanceThreshold = 0.6;
  scan = receive(laser,3);
  data = readCartesian(scan);
  x = data(end,1);
  y = data(end,2);
  dist = sqrt(x.^2 + y.^2);
  minDist = min(dist); 
  horizontalTolerance = 20;
  sizeGoal = 70;
  sizeTolerance = 5;
  latestImg = getColorImage(tbot);
  [height,width] = size(latestImg);
  [position,ballSize] = FindBlueBall(latestImg,blueBallParams);
  % img = receive(colorImgSub);
  % imshow(readImage(img))
    
    
    if isempty(position)
      if minDist < distanceThreshold
          linearVel = -.1;
          angularVel = 1.6;
      else
          linearVel = .12;
          angularVel = 0;
      end
      elseif (position(1) > (width/2)-horizontalTolerance)
        angularVel = 0.2;
      elseif (position(1) < (width/2)-horizontalTolerance)
        angularVel = 0.2;
    end
    
    if isempty(position)
      if minDist < distanceThreshold
          linearVel = -.1;
          angularVel = 1.6;
           else
          linearVel = .12;
          angularVel = 0;
      end
      elseif ballSize > sizeGoal + sizeTolerance
        linearVel = -0.1;
      elseif ballSize < sizeGoal - sizeTolerance
        linearVel = 0.1;
    end
    
    setVelocity(tbot,linearVel,angularVel)
    pause(0.2)
    end


function [c, mag, ball1] = FindBlueBall(img, params)
    
    if isempty(img)
        c = [];
        mag = [];
        return
    end
    
    imSize = size(img);
    
    heightThresh = imSize(1)*0.5; % Pixel height as a function of image size
    
    % Isolate blue color by combining blue images and dark images together
    blueImg = img(:,:,1)/2 + img(:,:,2)/2 - img(:,:,3)/2;
    blueThresh = blueImg < params.blueMax;
    darkIso = -img(:,:,1)/2 - img(:,:,2)/2 + 3*img(:,:,3) - 2*rgb2gray(img);
    darkThresh = darkIso > params.darkMin;
    ball1 = blueThresh & darkThresh;
    
    % Find contiguous regions in the filtered image
    s = regionprops(ball1, {'Centroid','Area','EquivDiameter'});
    
    % If there are none, conclude that no ball exists in the image
    if isempty(s)
        c = [];
        mag = [];
    else
        % Choose the region with the largest area as the ball
        [~, id] = max([s.Area]);
        c = s(id).Centroid;
        mag = s(id).EquivDiameter/2;
        % Threshold so we don't chase images over the horizon
        if (c(2) < heightThresh) || (mag < imSize(1)/24)
            c = [];
            mag = [];
        end
    end
end
